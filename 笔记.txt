一. 手工配置和部署一个Servlet
1. 下载并安装Tomcat
2. 写一个Java类继承HttpServlet，复写里面的doGet, doPost等方法
3. 编译步骤2中的Java类（javac -cp servlet-api.jar MyServlet.java， servlet-api.jar包在tomcat的lib目录下有）
4. 构建WEB应用目录：
servlet-demo1/WEB-INF/web.xml
servlet-demo1/WEB-INF/classes/MyServlet.class
5. 在web.xml中配置servlet, 主要配置如下:
<servlet>
  <servlet-name>myServlet</servlet-name>
  <servlet-class>MyServlet</servlet-class>
</servlet>  配置servlet.class文件对应的名称
<servlet-mapping>
  <servlet-name>myServlet</servlet-name>
  <url-pattern>/myservlet</url-pattern>
</servlet-mapping> 配置映射访问的url

6. 将servlet-dmeo1复制到tomcat\webapps下进行部署
7. tomcat\bin\startup.bak启动tomcat， 通过http://localhost:8080/servlet-demo1/myservlet 即可访访问
8. @WebServlet("/myAnnotationServlet) 注解也可以配置Servletle1, 这时候就不用web.xml了

二. Tomcat和Jetty都是按照Servlet规范实现的Servlet容器，同时也具有Http服务器的功能。 
Java程序员只需要编写业务逻辑代码，并将对应的Servlet部署到Tomcat即可，其它的事Tomcat帮你搞定。

三. Servlet规范接口：
public interface Servlet {
    void init(ServletConfig config) throws ServletException;
    
    ServletConfig getServletConfig();
    
    void service(ServletRequest req, ServletResponse res）throws ServletException, IOException;
    
    String getServletInfo();
    
    void destroy();
}
ServletConfig 的作用就是封装 Servlet初始化参数， 参数可以在web.xml中配置，然后java代码中通过getServletConfig获取。

四. Tomcat，Servlet和Spring容器的关系
Tomcat&Jetty在启动时给每个Web应用创建一个全局的上下文环境，这个上下文就是ServletContext，其为后面的Spring容器提供宿主环境。

Tomcat&Jetty在启动过程中触发容器初始化事件，Spring的ContextLoaderListener会监听到这个事件，它的contextInitialized方法会被调用，在这个方法中，Spring会初始化全局的Spring根容器，这个就是Spring的IoC容器，IoC容器初始化完毕后，Spring将其存储到ServletContext中，便于以后来获取。

Tomcat&Jetty在启动过程中还会扫描Servlet，一个Web应用中的Servlet可以有多个，以SpringMVC中的DispatcherServlet为例，这个Servlet实际上是一个标准的前端控制器，用以转发、匹配、处理每个Servlet请求。

Servlet一般会延迟加载，当第一个请求达到时，Tomcat&Jetty发现DispatcherServlet还没有被实例化，就调用DispatcherServlet的init方法，DispatcherServlet在初始化的时候会建立自己的容器，叫做SpringMVC 容器，用来持有Spring MVC相关的Bean。同时，Spring MVC还会通过ServletContext拿到Spring根容器，并将Spring根容器设为SpringMVC容器的父容器，请注意，Spring MVC容器可以访问父容器中的Bean，但是父容器不能访问子容器的Bean， 也就是说Spring根容器不能访问SpringMVC容器里的Bean。说的通俗点就是，在Controller里可以访问Service对象，但是在Service里不可以访问Controller对象。

五. Filter是干预过程的，它是过程的一部分；Listener是基于状态的，任何行为改变同一个状态，触发的事件一致。

六. Tomcat兩個核心組件：
1）Connector 用於處理socket請求，負責網絡字節流和ServletRequest /ServletResponse相互轉化
2）Container 加載和管理servlet, 以及具體Request請求的處理。

七. Tomacat，Nio2Endpint設計中沒有Poller（即沒有Selector），原因是因爲NIO2使用的是異步IO，Selector的工作交給内核去做了。